<?php

if (empty($wp_filesystem)) {
	require_once(ABSPATH . 'wp-admin/includes/file.php');
	WP_Filesystem();
}

class Homepage {

	var $name = 'Homepage';
	var $type = 'homepage';
	var $id;
	var $description;
	var $template;
	var $zones;
	var $assets = array();
	var $sidebars = array();
	var $rightRail = false;
	var $prominenceTerms = array();

	function __construct($options=array()) {
		$this->load($options);
		$this->init($options);
	}

	public function load($options) {
		$vars = get_object_vars($this);
		foreach ($options as $k => $v) {
			if (in_array($k, array_keys($vars)))
				$this->{$k} = $v;
		}
		if (empty($this->id))
			$this->populateId();
		else if (sanitize_title($this->id) !== $this->id)
			throw new Exception('Homepage `id` can only contain letters, numbers and hyphens.');

		$this->readZones();
		$this->activateTerms();
	}

	public function init($options=null) {}

	public function isActiveHomepageLayout() {
		$activeLayout = largo_get_active_homepage_layout();
		return get_class($this) == $activeLayout;
	}

	private function populateId() {
		$this->id = sanitize_title($this->name);
	}

	private function activateTerms() {
		if ($this->isActiveHomepageLayout()) {

			if (!taxonomy_exists('prominence')) {
				register_taxonomy('prominence', 'post', array(
					'hierarchical' => true,
					'label' => __('Post Prominence', 'largo'),
					'query_var' => true,
					'rewrite' => true,
				));
			}

			if (is_admin()) {
				$changed = false;
				$terms = get_terms('prominence', array(
					'hide_empty' => false,
					'fields' => 'all'
				));
				$names = array_map(function($arg) { return $arg->name; }, $terms);

				$term_ids = array();
				foreach ($this->prominenceTerms as $term ) {
					if (!in_array($term['name'], $names)) {
						$new_id = wp_insert_term(
							$term['name'], 'prominence',
							array(
								'description' => $term['description'],
								'slug' => $term['slug']
							)
						);
						$term_ids[] = $new_id;
						$changed = true;
					} else {
						foreach ($terms as $idx => $val) {
							if ($val->name == $term['name']) {
								$term_ids[] = $val->term_id;
								break;
							}
						}
					}
				}

				$this->prominenceTermsIds = $term_ids;
				//error_log(var_export($this->prominenceTermsIds, true));

				if ($changed)
					delete_option('prominence_children');

				add_filter('wp_terms_checklist_args', array(
					$this, 'filterProminenceTermsChecklistArgs'), 10, 2);
			}
		}
	}

	public function filterProminenceTermsChecklistArgs($args, $post_id) {
		//error_log(var_export($args, true));
		if ($args['taxonomy'] == 'prominence')
			$args['popular_cats'] = $this->prominenceTermsIds;

		return $args;
	}

	private function readZones() {
		global $wp_filesystem;

		$contents = $wp_filesystem->get_contents($this->template);
		$tokens = token_get_all($contents);
		$filtered = array_filter($tokens, function($t) { return $t[0] == T_VARIABLE; });
		$variables = array_map(function($item) { return str_replace("$", "", $item[1]); }, $filtered);
		$uniques = array_values(array_unique($variables));

		$this->zones = $uniques;
	}

	public function render() {
		$vars = array(
			'templateId' => $this->id,
			'templateType' => $this->type
		);
		foreach ($this->zones as $zone) {
			if (!empty($this->{$zone})) {
				if (function_exists($this->{$zone})) {
					$vars[$zone] = call_user_func($this->{$zone});
				} else if (is_string($this->{$zone})) {
					$vars[$zone] = $this->{$zone};
				}
			} else {
				if (method_exists($this, $zone))
					$vars[$zone] = call_user_func(array($this, $zone));
			}
		}
		extract($vars);
		include_once $this->template;
	}

	public function register() {
		$this->registerSidebars();
		$this->setRightRail();
		add_action('wp_enqueue_scripts', array($this, 'enqueueAssets'), 100);
	}

	public function enqueueAssets() {
		foreach ($this->assets as $asset) {
			if (preg_match('/\.js$/', $asset[1]))
				call_user_func_array('wp_enqueue_script', $asset);
			if (preg_match('/\.css$/', $asset[1]))
				call_user_func_array('wp_enqueue_style', $asset);
		}
	}

	public function registerSidebars() {
		foreach ($this->sidebars as $sidebar) {
			preg_match('|^(.*?)(\((.*)\))?$|', trim($sidebar), $sb);
			register_sidebar( array(
				'name' => trim($sb[1]),
				'id' => largo_make_slug( trim($sb[1]) ),
				'description' => (isset( $sb[3] ) ) ? trim($sb[3]) : __('Auto-generated by current homepage template'),
				'before_widget' => '<aside id="%1$s" class="%2$s clearfix">',
				'after_widget' 	=> "</aside>",
				'before_title' 	=> '<h3 class="widgettitle">',
				'after_title' 	=> '</h3>',
			));
		}
	}

	public function setRightRail() {
		global $largo;
		$rail = $largo['home_rail'] = $this->rightRail;
	}
}

class HomepageLayoutFactory {
	var $layouts = array();

	function __construct() {
		add_action('widgets_init', array($this, 'register_active_layout'), 100);
	}

	function register($layoutClass) {
		$this->layouts[$layoutClass] = new $layoutClass();
	}

	function unregister($layoutClass) {
		if (isset($this->layouts[$layoutClass]))
			unset($this->layouts[$layoutClass]);
	}

	function register_active_layout() {
		$active = largo_get_active_homepage_layout();
		if (!empty($active) && !empty($this->layouts[$active]))
			$this->layouts[$active]->register();
	}
}

function register_homepage_layout($layoutClass) {
	global $largo_homepage_factory;

	$largo_homepage_factory->register($layoutClass);
}

function unregister_homepage_layout($layoutClass) {
	global $largo_homepage_factory;

	$largo_homepage_factory->unregister($layoutClass);
}

$GLOBALS['largo_homepage_factory'] = new HomepageLayoutFactory();
